const path = require('path');
const fs = require('fs/promises');
const pick = require('just-pick');
const rimraf = require('rimraf');

const KIT_PAGE_RELATIVE_LAYOUT_PATH = '../../layouts/KitLayout.astro';

function getRepoRootPath() {
  return path.resolve(__dirname, '../../../');
}

async function getKitDirs() {
  const startersPath = path.resolve(getRepoRootPath(), 'starters');
  const dirItems = await fs.readdir(startersPath);
  const kitDirs = [];
  for (const item of dirItems) {
    const stats = await fs.stat(startersPath + '/' + item);
    if (stats.isDirectory() && item.charAt(0) !== '.') {
      kitDirs.push(item);
    }
  }
  return kitDirs;
}

function convertToFrontmatter(obj) {
  return Object.entries(obj)
    .map(([key, value]) => `${key}: ${obj[key]}`)
    .join('\n');
}

function formatMarkdownFile(markdown, frontmatter) {
  const name = frontmatter.split('\n').find((item) => item.includes('name:')).split(': ')[1];
  return `---
# generated by scripts/kitgen at ${new Date().toISOString()}
# edit KIT_PAGE_RELATIVE_LAYOUT_PATH in scripts/kitgen to change layout
layout: ${KIT_PAGE_RELATIVE_LAYOUT_PATH}
${frontmatter}
---

${markdown}`;

}

///////////////////////////////////////////////////////////////////////////////
// SCRIPT MAIN
////////////////////////////////////////////////////////////////////////////////

(async () => {
  const repoPath = getRepoRootPath();
  const kitPagesPath = path.join(repoPath, 'packages/website/src/pages/kit');

  try {
    const handle = await fs.opendir(kitPagesPath);
    console.info('kitgen: deleting existing kit pages');
    rimraf(`${kitPagesPath}/*.md`, async (err) => {
      if (err) {
        console.error(err);
      }
      await handle.close();
    });
  } catch (err) {
    if (err && err.code === 'ENOENT') {
      console.info('kitgen: creating kit pages directory');
      await fs.mkdir(kitPagesPath);
    }
  }

  const kitDirs = await getKitDirs();

  console.info('kitgen: generating kit pages');
  for (const dir of kitDirs) {
    const kitPath = path.join(repoPath, 'starters', dir);

    try {
      const readme = await fs.readFile(
        path.join(kitPath, 'README.md'),
        'utf-8'
      );
      const json = await fs.readFile(
        path.join(kitPath, 'package.json'),
        'utf-8'
      );
      const data = JSON.parse(json);

      const kitData = {
        ...pick(data, ['name', 'version', 'description', 'keywords']),
        readmePath: path.join(kitPath, 'README.md'),
        starterPath: `/starters/${dir}`,
      };

      const frontmatter = convertToFrontmatter(kitData);
      const formattedMarkdown = formatMarkdownFile(readme, frontmatter);

      const kitPagePath = path.join(
        repoPath,
        'packages/website/src/pages/kit',
        `${data.name}.md`
      );

      await fs.writeFile(kitPagePath, formattedMarkdown, 'utf-8');
    } catch (err) {
      console.error(
        `KITGEN: failed to write kit page for ${dir}: ${err.message}`
      );
    }
  }
})();
